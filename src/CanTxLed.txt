#include "config.h"
#include "eXoCAN.h"


// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏∏‡∏î TPIC6B595
#define DATA1  PA0  // SER (Data) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 1
#define CLOCK1 PA1  // SRCK (Clock) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 1
#define LATCH1 PA2  // RCLK (Latch) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 1

#define DATA2  PA3  // SER (Data) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 2
#define CLOCK2 PA4  // SRCK (Clock) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 2
#define LATCH2 PA5  // RCLK (Latch) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 2

// ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ LED ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏∏‡∏î
uint32_t ledState1 = 0; // ‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 1 (32 ‡∏î‡∏ß‡∏á)
uint32_t ledState2 = 0; // ‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 2 (24 ‡∏î‡∏ß‡∏á)

HardwareSerial mySerial(USART1);
eXoCAN can;  // Initialize eXoCAN object

const int txMsgID = 0x070;  
uint8_t txData[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

void shiftOut595(uint8_t dataPin, uint8_t clockPin, uint8_t latchPin, uint32_t data, uint8_t numRegisters) {
    digitalWrite(latchPin, LOW);
    for (int i = (numRegisters * 8) - 1; i >= 0; i--) {
        digitalWrite(clockPin, LOW);
        digitalWrite(dataPin, (data >> i) & 0x01);
        digitalWrite(clockPin, HIGH);
    }
    digitalWrite(latchPin, HIGH);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î LED ‡∏î‡∏ß‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡∏î‡∏±‡∏ö‡∏î‡∏ß‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
void setLED(uint8_t group, uint8_t index) {
    uint32_t *ledState;
    uint8_t dataPin, clockPin, latchPin;
    uint8_t numRegisters;

    if (group == 1) {
        if (index >= 32) {
            mySerial.println("[ERROR] LED index out of range (‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 1 ‡∏°‡∏µ 32 ‡∏î‡∏ß‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!)");
            return;
        }
        ledState = &ledState1;
        dataPin = DATA1;
        clockPin = CLOCK1;
        latchPin = LATCH1;
        numRegisters = 4;
    } 
    else if (group == 2) {
        if (index >= 24) {
            mySerial.println("[ERROR] LED index out of range (‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 2 ‡∏°‡∏µ 24 ‡∏î‡∏ß‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!)");
            return;
        }
        ledState = &ledState2;
        dataPin = DATA2;
        clockPin = CLOCK2;
        latchPin = LATCH2;
        numRegisters = 3;
    } 
    else {
        mySerial.println("[ERROR] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£");
        return;
    }

    *ledState = (1UL << index); // ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏î‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏î‡∏ß‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    mySerial.print("Group ");
    mySerial.print(group);
    mySerial.print(" | LED ");
    mySerial.print(index);
    mySerial.println(" ON | Others OFF");
    
    shiftOut595(dataPin, clockPin, latchPin, *ledState, numRegisters);
}
void setup() {
    mySerial.begin(115200);
    // pinMode(LED_PIN, OUTPUT);
    pinMode(PC13, OUTPUT);
    digitalWrite(PC13, HIGH);
    
    // Initialize CAN with standard ID length, 250kbps baud rate, using PA11/PA12 pins
    can.begin(STD_ID_LEN, BR250K, PORTA_11_12_XCVR);
    mySerial.println("‚úÖ CAN Bus Initialized - Listening for Messages...");
    mySerial.println("=== TPIC6B595 Debug Mode ===");

    pinMode(DATA1, OUTPUT); pinMode(CLOCK1, OUTPUT); pinMode(LATCH1, OUTPUT);
    pinMode(DATA2, OUTPUT); pinMode(CLOCK2, OUTPUT); pinMode(LATCH2, OUTPUT);
}

void loop() {
    volatile int rxID;        // Change uint32_t to volatile int
    volatile int rxFltrIdx;   // Extra argument required by eXoCAN
    uint8_t rxData[8];        // Array to store received CAN data

    // Check for incoming CAN messages
    if (can.receive(rxID, rxFltrIdx, rxData)) {
      if(rxID == 0x069){
        mySerial.print("üì• Received CAN ID: 0x");
        mySerial.print(rxID, HEX);
        mySerial.print(" | Data: ");

        // Print received data as hex values
        for (int i = 0; i < 8; i++) {
            mySerial.print("0x");
            if (rxData[i] < 0x10) mySerial.print("0");  // Add leading zero if necessary
            mySerial.print(rxData[i], HEX);
            mySerial.print(" ");

        }

        mySerial.println();  // New line for better readability
        setLED(1, rxData[0]); // ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏î‡∏ß‡∏á‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 1
        setLED(2, rxData[1]); // ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏î‡∏ß‡∏á‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 2
        bool sent = can.transmit(txMsgID, txData, sizeof(txData));

        if (sent) {
          mySerial.println("‚úÖ CAN Message Sent!");
        //   bink();
        } else {
          mySerial.println("‚ùå Failed to Send CAN Message!");
        }
      }
    }

}